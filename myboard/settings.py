"""
Django settings for myboard project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url #1 배포를 위한 db 설정

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 기존의 코드 SECRET_KEY = '...' 삭제
SECRET_KEY = '+$7(p9&ssydz03c#z)$i*p+&w5$&x62j_ab&7cg*mz$+5j058*'
''' (설명!!)(중요!!)배포를 위해 프로젝트를 깃허브에 공개할...
    공개할 예정이기 때문에 SECRET_KEY가 노출되면 안 된다.
    인증관련 비밀KEY값을 노출하지 않기 위해 django_environ(환경변수 패키지)설치하여
        환경변수를 등록하여 거기에 SECRET_KEY 를 적어놓고 가져다 쓰게끔 코드를 수정한다..!!
'''
'''SECRET_KEY = env('SECRET_KEY') #2-(3)배포 설정 - env('secret_key')에 저장해둔 SECRET_KEY 값을 가져오게끔 설정
# 2-(3) 배포 설정 중 SECRET_KEY 값을 환경변수에 저장하는 작업은 다른 곳에서 한다...
'''

# SECURITY WARNING: don't run with debug turned on in production!
# 배포하기 전에 DEBUG False로 바꿈!!
DEBUG = False
# 배포를 위해서 사용 가능한 호스트를 제한했음.
ALLOWED_HOSTS = ['localhost'] 


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'users',
    'corsheaders',
    'posts',
    'todo',
    'django_filters',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # 순서 중요! 프론트&벡 HTTP요청 CORS 정책 따르기
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # 순서 중요! Security Middleware 바로 다음! 배포를 위한 정적파일 사용을 돕는 미들웨어
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'myboard.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myboard.wsgi.application'

'''# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
# 데이터베이스 설정이다.
# db.sqlite3 파일에 저장된다.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
'''

'''#교재 헤로쿠 1번 배포 설정!!!!!!!!!
#1 dj_database_url 패키지를 활용해 DATABASE['default']를 수정하여,
#  기본 데이터베이스 설정으로 dj_database_url의 config를 사용하게끔 설정한다.
db_from_env = dj_database_url.config(conn_max_age=500) # 배포 설정!!
DATABASES['default'].update(db_from_env) #배포 설정!!
'''
# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
# 데이터베이스 설정이다.
DATABASES = {
    'default': dj_database_url.config(
        default='postgresql://postgres:postgres@localhost:5432/myboard',
        conn_max_age=600
    )
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 실습1 - 프로젝트 인증방식 설정
#       토큰 방식으로 설정함..
# 실습2 - 게시글 필터를 위한 전역.. 어쩌구 설정
# 실습3 - 게시글 페이지당 개수제한 pagination
#       모든 글을 가져오기 부담스러울 경우 한 번의 API 요청으로 가져올 수 있는 데이터 수를 제한하는 기능.
#       따로 작업할 필요 없이, settings.py의 REST_FRAMEWORK에 이 내용을 추가하면 된다.
#       www.django-rest-framework.org/api-guide/pagination/
#       인섬니아에 get요청을 보내보면 count와 함께 next, previous가 나타난다.
#       한 가지 주의할 점은 결과 데이터는 results 내에 들어간다는 것.
#       paging을 적용하기 전에는 바로 데이터 접근 가능하지만, results안에 데이터가 들어가 있기 때문에,
#           프론트엔드에서 데이터를 가져가는 과정이 조금 달라질 수 있다.
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
    'DEFAULT_PAGINATION_CLASS':
    'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 
    3,
}


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

# This setting informs Django of the URI path from which your static files will be served to users
# Here, they well be accessible at your-domain.onrender.com/static/... or yourcustomdomain.com/static/...
STATIC_URL = '/static/'
# This production code might break development mode, so we check whether we're in DEBUG mode
if not DEBUG:    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)
    STATIC_ROOT = Path(BASE_DIR) / 'staticfiles'
    # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use
    # and renames the files with unique names for each version to support long-term caching
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'



MEDIA_URL = '/media/'
MEDIA_ROOT = Path(BASE_DIR) / 'media'
